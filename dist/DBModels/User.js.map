{"version":3,"sources":["../../DBModels/User.js"],"names":["dbmain","require","Sequelize","Seq","bcrypt","saltRounds","module","exports","model","id","type","INTEGER","primaryKey","autoIncrement","firstName","STRING","allowNull","lastName","status","defaultValue","birthdate","email","phoneNumber","passwordHash","gender","TINYINT","paymentInfo","relations","hasMany","options","freezeTableName","hooks","beforeCreate","Promise","resolve","reject","genSalt","err","salt","hash","console","log"],"mappings":"AAAA;;AACA,IAAMA,SAASC,QAAQ,qBAAR,CAAf;AACA,IAAMC,YAAYF,OAAOG,GAAP,EAAlB;AACA,IAAMC,SAASH,QAAQ,QAAR,CAAf;AACA,IAAMI,aAAa,CAAnB;;AAEAC,OAAOC,OAAP,GAAiB;AACbC,WAAO;AACHC,YAAI;AACAC,kBAAMR,UAAUS,OADhB;AAEAC,wBAAY,IAFZ;AAGAC,2BAAe;AAHf,SADD;AAMHC,mBAAW;AACPJ,kBAAMR,UAAUa,MADT;AAEPC,uBAAW;AAFJ,SANR;AAUHC,kBAAU;AACNP,kBAAMR,UAAUa,MADV;AAENC,uBAAW;AAFL,SAVP;AAcHE,gBAAQ;AACJR,kBAAMR,UAAUa,MADZ;AAEJI,0BAAc;AAFV,SAdL;AAkBHC,mBAAW;AACPV,kBAAMR,UAAUa,MADT;AAEPC,uBAAW;AAFJ,SAlBR;AAsBHK,eAAO;AACHX,kBAAMR,UAAUa,MADb;AAEHC,uBAAW;AAFR,SAtBJ;AA0BHM,qBAAa;AACTZ,kBAAMR,UAAUa;AADP,SA1BV;AA6BHQ,sBAAc;AACVb,kBAAMR,UAAUa,MADN;AAEVC,uBAAW;AAFD,SA7BX;AAiCHQ,gBAAQ;AACJd,kBAAMR,UAAUuB;AADZ,SAjCL;AAoCHC,qBAAa;AACThB,kBAAMR,UAAUa,MADP;AAETC,uBAAW,IAFF;AAGTG,0BAAc;AAHL;AApCV,KADM;AA2CbQ,eAAW;AACPC,iBAAS;AACT;AACA;AACA;AACA;AALO,KA3CE;AAkDbC,aAAS;AACLC,yBAAiB,IADZ;AAELC,eAAO;AACHC,0BAAc,sBAASxB,KAAT,EAAgBqB,OAAhB,EAAyB;AACnC,uBAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC/B,2BAAOgC,OAAP,CAAe/B,UAAf,EAA2B,UAACgC,GAAD,EAAMC,IAAN,EAAe;AAAE;AACxC,4BAAID,GAAJ,EAAS,OAAOF,OAAOE,GAAP,CAAP;AACTjC,+BAAOmC,IAAP,CAAY/B,MAAMe,YAAlB,EAAgCe,IAAhC,EAAsC,UAACD,GAAD,EAAME,IAAN,EAAe;AAAE;AACnDC,oCAAQC,GAAR,CAAY,+BAAZ;AACAjC,kCAAMe,YAAN,GAAqBgB,IAArB;AACA,mCAAOL,QAAQ1B,KAAR,EAAeqB,OAAf,CAAP,CAHiD,CAGnB;AACjC,yBAJD;AAKH,qBAPD;AAQH,iBATM,CAAP;AAWH;AAbE;AAFF;AAlDI,CAAjB","file":"User.js","sourcesContent":["'use strict';\nconst dbmain = require('../config/DB/DBmain');\nconst Sequelize = dbmain.Seq();\nconst bcrypt = require('bcrypt');\nconst saltRounds = 5;\n\nmodule.exports = {\n    model: {\n        id: {\n            type: Sequelize.INTEGER,\n            primaryKey: true,\n            autoIncrement: true\n        },\n        firstName: {\n            type: Sequelize.STRING,\n            allowNull: false\n        },\n        lastName: {\n            type: Sequelize.STRING,\n            allowNull: false\n        },\n        status: {\n            type: Sequelize.STRING,\n            defaultValue: 'active'\n        },\n        birthdate: {\n            type: Sequelize.STRING,\n            allowNull: true\n        },\n        email: {\n            type: Sequelize.STRING,\n            allowNull: false\n        },\n        phoneNumber: {\n            type: Sequelize.STRING\n        },\n        passwordHash: {\n            type: Sequelize.STRING,\n            allowNull: false\n        },\n        gender: {\n            type: Sequelize.TINYINT\n        },\n        paymentInfo: {\n            type: Sequelize.STRING,\n            allowNull: true,\n            defaultValue: null\n        }\n    },\n    relations: {\n        hasMany: \"Haircut\"\n        // hasMany: \"Review\",\n        // BelongsTo: \"Hairtype\",\n        // hasOne: \"Photo\",\n        // hasOne: \"Location\"\n    },\n    options: {\n        freezeTableName: true,\n        hooks: {\n            beforeCreate: function(model, options) {\n                return new Promise((resolve, reject) => {\n                    bcrypt.genSalt(saltRounds, (err, salt) => { //generate salt using saltRounds provided\n                        if (err) return reject(err);\n                        bcrypt.hash(model.passwordHash, salt, (err, hash) => { //generate hash using password and salt generated\n                            console.log(\"Getting password encrypted...\");\n                            model.passwordHash = hash;\n                            return resolve(model, options)//sets user password to hash\n                        });\n                    });\n                });\n\n            }\n        }\n    }\n};"]}