{"version":3,"sources":["../../DBModels/User.js"],"names":["dbmain","require","Sequelize","Seq","bcrypt","saltRounds","module","exports","model","id","type","INTEGER","primaryKey","autoIncrement","status","STRING","defaultValue","birthdate","allowNull","email","phoneNumber","passwordHash","gender","TINYINT","paymentInfo","options","freezeTableName","hooks","beforeCreate","Promise","resolve","reject","genSalt","err","salt","hash","console","log"],"mappings":"AAAA;;AACA,IAAMA,SAASC,QAAQ,qBAAR,CAAf;AACA,IAAMC,YAAYF,OAAOG,GAAP,EAAlB;AACA,IAAMC,SAASH,QAAQ,QAAR,CAAf;AACA,IAAMI,aAAa,CAAnB;;AAEAC,OAAOC,OAAP,GAAiB;AACbC,WAAO;AACHC,YAAI;AACAC,kBAAMR,UAAUS,OADhB;AAEAC,wBAAY,IAFZ;AAGAC,2BAAe;AAHf,SADD;AAMHC,gBAAQ;AACJJ,kBAAMR,UAAUa,MADZ;AAEJC,0BAAc;AAFV,SANL;AAUHC,mBAAW;AACPP,kBAAMR,UAAUa,MADT;AAEPG,uBAAW;AAFJ,SAVR;AAcHC,eAAO;AACHT,kBAAMR,UAAUa,MADb;AAEHG,uBAAW;AAFR,SAdJ;AAkBHE,qBAAa;AACTV,kBAAMR,UAAUa;AADP,SAlBV;AAqBHM,sBAAc;AACVX,kBAAMR,UAAUa,MADN;AAEVG,uBAAW;AAFD,SArBX;AAyBHI,gBAAQ;AACJZ,kBAAMR,UAAUqB;AADZ,SAzBL;AA4BHC,qBAAa;AACTd,kBAAMR,UAAUa,MADP;AAETG,uBAAW,IAFF;AAGTF,0BAAc;AAHL;AA5BV,KADM;AAmCbS,aAAS;AACLC,yBAAiB,IADZ;AAELC,eAAO;AACHC,0BAAc,sBAASpB,KAAT,EAAgBiB,OAAhB,EAAyB;AACnC,uBAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC3B,2BAAO4B,OAAP,CAAe3B,UAAf,EAA2B,UAAC4B,GAAD,EAAMC,IAAN,EAAe;AAAE;AACxC,4BAAID,GAAJ,EAAS,OAAOF,OAAOE,GAAP,CAAP;AACT7B,+BAAO+B,IAAP,CAAY3B,MAAMa,YAAlB,EAAgCa,IAAhC,EAAsC,UAACD,GAAD,EAAME,IAAN,EAAe;AAAE;AACnDC,oCAAQC,GAAR,CAAY,+BAAZ;AACA7B,kCAAMa,YAAN,GAAqBc,IAArB;AACA,mCAAOL,QAAQtB,KAAR,EAAeiB,OAAf,CAAP,CAHiD,CAGnB;AACjC,yBAJD;AAKH,qBAPD;AAQH,iBATM,CAAP;AAWH;AAbE;AAFF;AAnCI,CAAjB","file":"User.js","sourcesContent":["'use strict';\nconst dbmain = require('../config/DB/DBmain');\nconst Sequelize = dbmain.Seq();\nconst bcrypt = require('bcrypt');\nconst saltRounds = 5;\n\nmodule.exports = {\n    model: {\n        id: {\n            type: Sequelize.INTEGER,\n            primaryKey: true,\n            autoIncrement: true\n        },\n        status: {\n            type: Sequelize.STRING,\n            defaultValue: 'active'\n        },\n        birthdate: {\n            type: Sequelize.STRING,\n            allowNull: true\n        },\n        email: {\n            type: Sequelize.STRING,\n            allowNull: false\n        },\n        phoneNumber: {\n            type: Sequelize.STRING\n        },\n        passwordHash: {\n            type: Sequelize.STRING,\n            allowNull: false\n        },\n        gender: {\n            type: Sequelize.TINYINT\n        },\n        paymentInfo: {\n            type: Sequelize.STRING,\n            allowNull: true,\n            defaultValue: null\n        }\n    },\n    options: {\n        freezeTableName: true,\n        hooks: {\n            beforeCreate: function(model, options) {\n                return new Promise((resolve, reject) => {\n                    bcrypt.genSalt(saltRounds, (err, salt) => { //generate salt using saltRounds provided\n                        if (err) return reject(err);\n                        bcrypt.hash(model.passwordHash, salt, (err, hash) => { //generate hash using password and salt generated\n                            console.log(\"Getting password encrypted...\");\n                            model.passwordHash = hash;\n                            return resolve(model, options)//sets user password to hash\n                        });\n                    });\n                });\n\n            }\n        }\n    }\n};"]}