{"version":3,"sources":["../../../profiles/DBModels/index.js"],"names":["path","require","dbmain","setup","__dirname"],"mappings":";;AAAA;AACA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,SAASD,QAAQ,wBAAR,CAAf;;AAEAC,OAAOC,KAAP,CAAaC,SAAb","file":"index.js","sourcesContent":["// const fs = require(\"fs\"); // file system for grabbing files\nconst path = require(\"path\");\n// const Sequelize = require('sequelize');\n// const db = require('../../config/DB/config_db');\n//\n// // Load each model file\n// const models = Object.assign({}, ...fs.readdirSync(__dirname)\n//     .filter((file) =>\n//         (file.indexOf(\".\") !== 0) && (file !== 'index.js')\n//     )\n//     .map(function (file) {\n//         const model = require(path.join(__dirname, file));\n//         // console.log(model.init(sequelize).tableName)\n//         return {\n//             [model.name]: model.init(db),\n//         };\n//     })\n// );\n//\n// // // Load model associations\n// // for (const model of Object.keys(models)) {\n// //     typeof models[model].associate === 'function' && models[model].associate(models);\n// // }\n//\n// const bcrypt = require('bcrypt');\n// const saltRounds = 4;\n//\n// //User Hooks\n//\n// //using the user model encrypt and salt password before create\n// models.User.beforeCreate ((user, options) => {\n//     console.log(\"Storing the password\");\n//     return new Promise((resolve, reject) => {\n//         bcrypt.genSalt(saltRounds, (err, salt) => { //generate salt using saltRounds provided\n//             if(err) return reject(err);\n//             bcrypt.hash(user.passwordHash, salt, (err, hash) => { //generate hash using password and salt generated\n//                 console.log(\"Getting password encrypted\");\n//                 user.passwordHash = hash; //sets user password to hash\n//                 return resolve(user, options);\n//             });\n//         });\n//     });\n// });\n//\n// //instance Methods\n// models.User.prototype.validatePassword = ((user, testPass) => {\n//\n//     console.log(\"Validating password\" + \" : \" + user.passwordHash + \" and \" + testPass);\n//     bcrypt.compare(testPass, user.passwordHash, (err, res) => {\n//         if (err) return (err);\n//         else{\n//             if(res) {\n//                 console.log(\"validate successfully\");\n//                 return res;\n//             }\n//             else {\n//                 console.log(\"validate unsuccessful\");\n//                 return res;\n//             }\n//         }\n//     });\n// });\n//\n// module.exports = models;\n//\n\nconst dbmain = require('../../config/DB/DBmain');\n\ndbmain.setup(__dirname);"]}