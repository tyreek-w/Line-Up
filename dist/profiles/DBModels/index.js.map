{"version":3,"sources":["../../../profiles/DBModels/index.js"],"names":["fs","require","path","Sequelize","db","models","Object","assign","readdirSync","__dirname","filter","file","indexOf","map","model","join","name","init","bcrypt","saltRounds","User","beforeCreate","user","options","console","log","Promise","resolve","reject","genSalt","err","salt","hash","passwordHash","prototype","validatePassword","testPass","compare","res","module","exports"],"mappings":";;;;;;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX,C,CAA0B;AAC1B,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,YAAYF,QAAQ,WAAR,CAAlB;AACA,IAAMG,KAAKH,QAAQ,2BAAR,CAAX;;AAEA;AACA,IAAMI,SAASC,OAAOC,MAAP,gBAAc,EAAd,4BAAqBP,GAAGQ,WAAH,CAAeC,SAAf,EAC/BC,MAD+B,CACxB,UAACC,IAAD;AAAA,WACHA,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAAS,UADnC;AAAA,CADwB,EAI/BE,GAJ+B,CAI3B,UAAUF,IAAV,EAAgB;AACjB,QAAMG,QAAQb,QAAQC,KAAKa,IAAL,CAAUN,SAAV,EAAqBE,IAArB,CAAR,CAAd;AACA;AACA,+BACKG,MAAME,IADX,EACkBF,MAAMG,IAAN,CAAWb,EAAX,CADlB;AAGH,CAV+B,CAArB,GAAf;;AAaA;AACA;AACA;AACA;;AAEA,IAAMc,SAASjB,QAAQ,QAAR,CAAf;AACA,IAAMkB,aAAa,CAAnB;;AAEA;;AAEA;AACAd,OAAOe,IAAP,CAAYC,YAAZ,CAA0B,UAACC,IAAD,EAAOC,OAAP,EAAmB;AACzCC,YAAQC,GAAR,CAAY,sBAAZ;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCV,eAAOW,OAAP,CAAeV,UAAf,EAA2B,UAACW,GAAD,EAAMC,IAAN,EAAe;AAAE;AACxC,gBAAGD,GAAH,EAAQ,OAAOF,OAAOE,GAAP,CAAP;AACRZ,mBAAOc,IAAP,CAAYV,KAAKW,YAAjB,EAA+BF,IAA/B,EAAqC,UAACD,GAAD,EAAME,IAAN,EAAe;AAAE;AAClDR,wBAAQC,GAAR,CAAY,4BAAZ;AACAH,qBAAKW,YAAL,GAAoBD,IAApB,CAFgD,CAEtB;AAC1B,uBAAOL,QAAQL,IAAR,EAAcC,OAAd,CAAP;AACH,aAJD;AAKH,SAPD;AAQH,KATM,CAAP;AAUH,CAZD;;AAcA;AACAlB,OAAOe,IAAP,CAAYc,SAAZ,CAAsBC,gBAAtB,GAA0C,UAACb,IAAD,EAAOc,QAAP,EAAoB;;AAE1DZ,YAAQC,GAAR,CAAY,wBAAwB,KAAxB,GAAgCH,KAAKW,YAArC,GAAoD,OAApD,GAA8DG,QAA1E;AACAlB,WAAOmB,OAAP,CAAeD,QAAf,EAAyBd,KAAKW,YAA9B,EAA4C,UAACH,GAAD,EAAMQ,GAAN,EAAc;AACtD,YAAIR,GAAJ,EAAS,OAAQA,GAAR,CAAT,KACI;AACA,gBAAGQ,GAAH,EAAQ;AACJd,wBAAQC,GAAR,CAAY,uBAAZ;AACA,uBAAOa,GAAP;AACH,aAHD,MAIK;AACDd,wBAAQC,GAAR,CAAY,uBAAZ;AACA,uBAAOa,GAAP;AACH;AACJ;AACJ,KAZD;AAaH,CAhBD;;AAkBAC,OAAOC,OAAP,GAAiBnC,MAAjB","file":"index.js","sourcesContent":["const fs = require(\"fs\"); // file system for grabbing files\nconst path = require(\"path\");\nconst Sequelize = require('sequelize');\nconst db = require('../../config/DB/config_db');\n\n// Load each model file\nconst models = Object.assign({}, ...fs.readdirSync(__dirname)\n    .filter((file) =>\n        (file.indexOf(\".\") !== 0) && (file !== 'index.js')\n    )\n    .map(function (file) {\n        const model = require(path.join(__dirname, file));\n        // console.log(model.init(sequelize).tableName)\n        return {\n            [model.name]: model.init(db),\n        };\n    })\n);\n\n// // Load model associations\n// for (const model of Object.keys(models)) {\n//     typeof models[model].associate === 'function' && models[model].associate(models);\n// }\n\nconst bcrypt = require('bcrypt');\nconst saltRounds = 4;\n\n//User Hooks\n\n//using the user model encrypt and salt password before create\nmodels.User.beforeCreate ((user, options) => {\n    console.log(\"Storing the password\");\n    return new Promise((resolve, reject) => {\n        bcrypt.genSalt(saltRounds, (err, salt) => { //generate salt using saltRounds provided\n            if(err) return reject(err);\n            bcrypt.hash(user.passwordHash, salt, (err, hash) => { //generate hash using password and salt generated\n                console.log(\"Getting password encrypted\");\n                user.passwordHash = hash; //sets user password to hash\n                return resolve(user, options);\n            });\n        });\n    });\n});\n\n//instance Methods\nmodels.User.prototype.validatePassword = ((user, testPass) => {\n\n    console.log(\"Validating password\" + \" : \" + user.passwordHash + \" and \" + testPass);\n    bcrypt.compare(testPass, user.passwordHash, (err, res) => {\n        if (err) return (err);\n        else{\n            if(res) {\n                console.log(\"validate successfully\");\n                return res;\n            }\n            else {\n                console.log(\"validate unsuccessful\");\n                return res;\n            }\n        }\n    });\n});\n\nmodule.exports = models;\n\n"]}