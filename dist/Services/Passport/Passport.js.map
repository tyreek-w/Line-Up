{"version":3,"sources":["../../../Services/Passport/Passport.js"],"names":["passport","require","LocalStrategy","Strategy","models","middleware","serializeUser","user","done","id","deserializeUser","User","findById","then","err","authenticateRoute","use","usernameField","passwordField","passReqToCallback","req","username","password","type","body","findOne","where","email","console","log","message","validatePassword","userId","Barber","findOrCreate","defaults","firstName","lastName","status","phoneNumber","gender","paymentInfo","passwordHash","spread","created","UserId","BarberModel","isPremium","premium","module","exports"],"mappings":"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","file":"Passport.js","sourcesContent":["/*\n* PassPort service for registering both barbers and clients\n*\n* Provides different strategies for signing in and signing up users.\n*\n* Sequelize models are used to declare different search queries for authentication\n*\n* Models Used:\n*   - Barber User\n*   - Client User\n*\n* Strategies used:\n* Local SignIn\n*   - Used to verify users when signing in API with username/email and password\n*   - Email is used instead of username to search for User in database if client is signing in\n*   - Username is used to lookup user if barber is signing in\n*\n* Local SignUp\n*   - Used to verify users when attempting to create a new account with username or email/password\n*/\n\n\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst models = require('../../profiles/DBModels/index');\nconst middleware = require('./AuthMiddleware');\n//serializes user id to session on each auth request after signin\npassport.serializeUser((user, done) => {\n    done(null, user.id);\n});\n//removes user with id from session\npassport.deserializeUser((id, done) => {\n    models.User.findById(id)\n        .then((user,err) => {\n            done(err, user);\n        });\n});\n\npassport.authenticateRoute = middleware;\n\n//Local signin strategy used for verfying and logging in existing users\npassport.use('local-signin', new LocalStrategy({\n        usernameField: 'email',\n        passwordField: 'password',\n        passReqToCallback: true\n    }, (req, username, password, done) => {\n        let type = req.body.type || 'client';\n        if (type === 'client') { //if type is client , proceeds to looking for a client User\n            //looks for client with matching email\n            let User = new models.User();\n            models.User.findOne({where: {email: username}})\n                .then((user, err) => {\n                    //respond with error if any are found\n                    if (err) {return done(err);}\n                    //if no user is found prompt user that email is incorrect\n                    if (!user) {\n                        console.log(\"User has incorrect email\");\n                        return done(null, false, {message: 'Incorrect email'})\n                    }\n                    //if password validation fails prompt user that password is incorrect\n                    else if (!User.validatePassword(user, password)) {\n                        console.log(\"User has incorrect password\");\n                        return done(null, false, {message: 'Incorrect password'})\n                    }\n                    else{\n                        //if nothing fails, complete request and respond with user object\n                        return done(null, user)\n                    }\n                })\n            } else if (type === 'barber' && req.userId) { //if type is barber and userid has been passed proceeds to looking for barber\n            //looks for barber with matching username\n            models.Barber.findOne({\n                where: {username: req.username}\n            }).then((user, err) => {\n                //respond with error if any are found\n                if (err) return done(err);\n                //if no barber matches prompt user that username is incorrect\n                if (!user) {\n                    return done(null, false, {message: 'Incorrect username'})\n                }\n                //if nothing fails, complete request and respond with barber object\n                return done(null, user)\n            });\n        }})\n    );\n\n//Local Sign Up strategy used for verifying and creating new users\npassport.use('local-signup', new LocalStrategy({\n        usernameField: 'email',\n        passwordField: 'password',\n        passReqToCallback: true\n    }, (req, username, password, done) => {\n\n        if(req.body.type === 'client') {\n            models.User\n                .findOrCreate({ //look for existing user or create new\n                    where: { email: username},\n                    defaults: {\n                        id: req.body.id, //This id is generated somewhere else (only provided by req in dev)\n                        firstName: req.body.firstName,\n                        lastName: req.body.lastName,\n                        status: req.body.status,\n                        phoneNumber: req.body.phoneNumber,\n                        gender: req.body.gender,\n                        paymentInfo: req.body.paymentInfo || null,\n                        passwordHash: password\n                    }\n                })\n                .spread((user, created) => {\n                    if(created) {  //if user is created return user in callback\n                        console.log('new user created');\n                        return done(null, user);\n                    }\n                    else{   //if user is not created respond with error message\n                        console.log('User has already been created');\n                        return done(null, created, {message: 'User already exists'})\n                    }\n\n                })\n        }\n        else if(req.body.UserId) {\n                let BarberModel = models.Barber;\n                BarberModel\n                    .findOrCreate({\n                        where: { username: req.body.username},\n                        defaults: {\n                            UserId: req.body.UserId,\n                            isPremium: req.body.premium || false\n                        }\n                    })\n                    .spread((user, created) => {\n                        if (created) {\n                            console.log('barber Created');\n                            return done(null, user)\n                        }\n                        else {\n                            console.log(\"Barber already exists and could not be created\");\n                            return done(null, false, {message: 'Barber Profile already exists'})\n                        }\n                    })\n    }\n})\n);\n\nmodule.exports = passport;"]}