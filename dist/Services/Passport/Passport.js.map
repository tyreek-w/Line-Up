{"version":3,"sources":["../../../Services/Passport/Passport.js"],"names":["passport","require","LocalStrategy","Strategy","dbmain","User","middleware","serializeUser","user","done","id","deserializeUser","tempUser","use","findById","then","err","authenticateRoute","usernameField","passwordField","passReqToCallback","req","username","password","type","body","findOne","where","email","console","log","message","validatePassword","userId","models","Barber","findOrCreate","defaults","firstName","lastName","status","phoneNumber","gender","paymentInfo","passwordHash","spread","created","UserId","BarberModel","isPremium","premium","module","exports"],"mappings":"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","file":"Passport.js","sourcesContent":["/*\n* PassPort service for registering both barbers and clients\n*\n* Provides different strategies for signing in and signing up users.\n*\n* Sequelize models are used to declare different search queries for authentication\n*\n* Models Used:\n*   - Barber User\n*   - Client User\n*\n* Strategies used:\n* Local SignIn\n*   - Used to verify users when signing in API with username/email and password\n*   - Email is used instead of username to search for User in database if client is signing in\n*   - Username is used to lookup user if barber is signing in\n*\n* Local SignUp\n*   - Used to verify users when attempting to create a new account with username or email/password\n*/\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst dbmain = require('../../config/DB/DBmain');\nconst User = require('../../profiles/Controllers/UserController');\nconst middleware = require('./AuthMiddleware');\n//serializes user id to session on each auth request after signin\npassport.serializeUser((user, done) => {\n    done(null, user.id);\n});\n//removes user with id from session\npassport.deserializeUser((id, done) => {\n    let tempUser = User.use();\n    tempUser.findById(id)\n        .then((user,err) => {\n            done(err, user);\n        });\n});\n\npassport.authenticateRoute = middleware;\n\n//Local signin strategy used for verfying and logging in existing users\npassport.use('local-signin', new LocalStrategy({\n        usernameField: 'email',\n        passwordField: 'password',\n        passReqToCallback: true\n    }, (req, username, password, done) => {\n        let type = req.body.type || 'client';\n        if (type === 'client') { //if type is client , proceeds to looking for a client User\n            //looks for client with matching email\n            const tempUser = new User.use();\n            tempUser.findOne({where: {email: username}})\n                .then((user, err) => {\n                    //respond with error if any are found\n                    if (err) {return done(err);}\n                    //if no user is found prompt user that email is incorrect\n                    if (!user) {\n                        console.log(\"User has incorrect email\");\n                        return done(null, false, {message: 'Incorrect email'})\n                    }\n                    //if password validation fails prompt user that password is incorrect\n                    if (tempUser.validatePassword(user, password)) {\n                        console.log(\"User has incorrect password\");\n                        return done(null, false, {message: 'Incorrect password'})\n                    }\n                    // if(tempUser.validatePassword(user, password)){\n                    else{\n                        //if nothing fails, complete request and respond with user object\n                        console.log(\"login successful\");\n                        return done(null, user);\n                    }\n                })\n            } else if (type === 'barber' && req.userId) { //if type is barber and userid has been passed proceeds to looking for barber\n            //looks for barber with matching username\n            models.Barber.findOne({\n                where: {username: req.username}\n            }).then((user, err) => {\n                //respond with error if any are found\n                if (err) return done(err);\n                //if no barber matches prompt user that username is incorrect\n                if (!user) {\n                    return done(null, false, {message: 'Incorrect username'})\n                }\n                //if nothing fails, complete request and respond with barber object\n                return done(null, user)\n            });\n        }})\n    );\n\n//Local Sign Up strategy used for verifying and creating new users\npassport.use('local-signup', new LocalStrategy({\n        usernameField: 'email',\n        passwordField: 'password',\n        passReqToCallback: true\n    }, (req, username, password, done) => {\n\n        if(req.body.type === 'client') {\n            const tempUser = User.use();\n            console.log('checking for user existence...');\n            tempUser\n                .findOrCreate({ //look for existing user or create new\n                    where: { email: username},\n                    defaults: {\n                        id: req.body.id, //This id is generated somewhere else (only provided by req in dev)\n                        firstName: req.body.firstName,\n                        lastName: req.body.lastName,\n                        status: req.body.status,\n                        phoneNumber: req.body.phoneNumber,\n                        gender: req.body.gender,\n                        paymentInfo: req.body.paymentInfo || null,\n                        passwordHash: password,\n                    }\n                })\n                .spread((user, created) => {\n                    if(created) {  //if user is created return user in callback\n                        console.log('new user created');\n                        return done(null, user);\n                    }\n                    else{   //if user is not created respond with error message\n                        console.log('User has already been created');\n                        return done(null, created, {message: 'User already exists'})\n                    }\n\n                })\n        }\n        else if(req.body.UserId) {\n                let BarberModel = models.Barber;\n                BarberModel\n                    .findOrCreate({\n                        where: { username: req.body.username},\n                        defaults: {\n                            UserId: req.body.UserId,\n                            isPremium: req.body.premium || false\n                        }\n                    })\n                    .spread((user, created) => {\n                        if (created) {\n                            console.log('barber Created');\n                            return done(null, user)\n                        }\n                        else {\n                            console.log(\"Barber already exists and could not be created\");\n                            return done(null, false, {message: 'Barber Profile already exists'})\n                        }\n                    })\n    }\n})\n);\n\nmodule.exports = passport;"]}