{"version":3,"sources":["../../../Services/Passport/Passport.js"],"names":["passport","require","LocalStrategy","Strategy","dbmain","Sequelize","UserController","serializeUser","user","done","console","log","get","id","deserializeUser","User","model","findById","then","err","use","usernameField","passwordField","passReqToCallback","req","username","password","type","body","Hairtype","Photo","Location","findOne","where","email","include","message","validatePassword","userId","Barber","findOrCreate","defaults","status","phoneNumber","gender","paymentInfo","passwordHash","spread","created","session","catch","ValidationError","BarberModel","UserId","isPremium","premium","module","exports"],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,gBAAgBD,QAAQ,gBAAR,EAA0BE,QAAhD;AACA,IAAMC,SAASH,QAAQ,wBAAR,CAAf;AACA,IAAMI,YAAYJ,QAAQ,WAAR,CAAlB;AACA,IAAMK,iBAAiBL,QAAQ,2CAAR,CAAvB;;AAEA;AACAD,SAASO,aAAT,CAAuB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACnCC,YAAQC,GAAR,CAAY,YAAZ;AACAF,SAAK,IAAL,EAAWD,KAAKI,GAAL,GAAWC,EAAtB;AACH,CAHD;AAIA;AACAb,SAASc,eAAT,CAAyB,UAACD,EAAD,EAAKJ,IAAL,EAAc;AACnC,QAAIM,OAAOX,OAAOY,KAAP,CAAa,MAAb,CAAX;AACAD,SAAKE,QAAL,CAAcJ,EAAd,EACKK,IADL,CACU,UAACV,IAAD,EAAMW,GAAN,EAAc;AAChBV,aAAKU,GAAL,EAAUX,IAAV;AACH,KAHL;AAIH,CAND;;AAQA;AACAR,SAASoB,GAAT,CAAa,cAAb,EAA6B,IAAIlB,aAAJ,CAAkB;AACvCmB,mBAAe,OADwB;AAEvCC,mBAAe,UAFwB;AAGvCC,uBAAmB;AAHoB,CAAlB,EAItB,UAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,EAA0BjB,IAA1B,EAAmC;AAClC,QAAIkB,OAAOH,IAAII,IAAJ,CAASD,IAAT,IAAiB,QAA5B;AACA,QAAIA,SAAS,QAAb,EAAuB;AAAA;;AAAE;AACrB;AACA,YAAIZ,OAAOX,OAAOY,KAAP,CAAa,MAAb,CAAX;AACA,YAAIa,WAAWzB,OAAOY,KAAP,CAAa,UAAb,CAAf;AACA,YAAIc,QAAQ1B,OAAOY,KAAP,CAAa,OAAb,CAAZ;AACA,YAAIe,WAAW3B,OAAOY,KAAP,CAAa,UAAb,CAAf;AACAD,aAAKiB,OAAL,CACI,EAACC,OAAO,EAACC,OAAOT,QAAR,EAAR;AACAU,qBAAS;AAELnB,uBAAOa;AAFF,8CAGEC,KAHF,kCAIEC,QAJF,+BAIgB,cAJhB;AADT,SADJ,EAUKb,IAVL,CAUU,UAACV,IAAD,EAAOW,GAAP,EAAe;AACjB;AACA,gBAAIA,GAAJ,EAAS;AAAC,uBAAOV,KAAKU,GAAL,CAAP;AAAkB;AAC5B;AACA,gBAAI,CAACX,IAAL,EAAW;AACPE,wBAAQC,GAAR,CAAY,0BAAZ;AACA,uBAAOF,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC2B,SAAS,iBAAV,EAAlB,CAAP;AACH;AACD;AACA,gBAAK9B,eAAe+B,gBAAf,CAAgC7B,IAAhC,EAAsCgB,GAAtC,CAAL,EAAkD;AAC9Cd,wBAAQC,GAAR,CAAY,6BAAZ;AACA,uBAAOF,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC2B,SAAS,oBAAV,EAAlB,CAAP;AACH;AACD;AAJA,iBAKI;AACA;AACA1B,4BAAQC,GAAR,CAAY,kBAAZ;AACA,2BAAOF,KAAK,IAAL,EAAWD,IAAX,CAAP;AACH;AACJ,SA7BL;AA8BC,KApCL,MAoCW,IAAImB,SAAS,QAAT,IAAqBH,IAAIc,MAA7B,EAAqC;AAAE;AAC9C;AACA,YAAIC,SAASvB,MAAM,QAAN,CAAb;AACAuB,eAAOP,OAAP,CAAe;AACXC,mBAAO,EAACR,UAAUD,IAAIC,QAAf;AADI,SAAf,EAEGP,IAFH,CAEQ,UAACV,IAAD,EAAOW,GAAP,EAAe;AACnB;AACA,gBAAIA,GAAJ,EAAS,OAAOV,KAAKU,GAAL,CAAP;AACT;AACA,gBAAI,CAACX,IAAL,EAAW;AACP,uBAAOC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC2B,SAAS,oBAAV,EAAlB,CAAP;AACH;AACD;AACA,mBAAO3B,KAAK,IAAL,EAAWD,IAAX,CAAP;AACH,SAXD;AAYH;AAAC,CAzDmB,CAA7B;;AA4DA;AACAR,SAASoB,GAAT,CAAa,cAAb,EAA6B,IAAIlB,aAAJ,CAAkB;AACvCmB,mBAAe,OADwB;AAEvCC,mBAAe,UAFwB;AAGvCC,uBAAmB;AAHoB,CAAlB,EAItB,UAACC,GAAD,EAAMC,QAAN,EAAgBC,QAAhB,EAA0BjB,IAA1B,EAAmC;AACtCC,YAAQC,GAAR,CAAY,sBAAZ;AACI,QAAGa,IAAII,IAAJ,CAASD,IAAT,KAAkB,QAAlB,IAA8BH,IAAII,IAAJ,CAASD,IAAT,IAAiB,IAAlD,EAAwD;AACpD,YAAIZ,OAAOX,OAAOY,KAAP,CAAa,MAAb,CAAX;AACAN,gBAAQC,GAAR,CAAY,gCAAZ;AACAI,aACKyB,YADL,CACkB,EAAE;AACZP,mBAAO,EAAEC,OAAOT,QAAT,EADG;AAEVgB,sBAAU;AACN5B,oBAAIW,IAAII,IAAJ,CAASf,EADP,EACW;AACjB6B,wBAAQlB,IAAII,IAAJ,CAASc,MAAT,IAAmB,QAFrB;AAGNC,6BAAanB,IAAII,IAAJ,CAASe,WAHhB;AAINC,wBAAQpB,IAAII,IAAJ,CAASgB,MAAT,IAAmB,CAJrB;AAKNC,6BAAarB,IAAII,IAAJ,CAASiB,WAAT,IAAwB,IAL/B;AAMNC,8BAAcpB;AANR;AAFA,SADlB,EAYKqB,MAZL,CAYY,UAACvC,IAAD,EAAOwC,OAAP,EAAmB;AACvB,gBAAGxC,IAAH,EAAS;AAAG;AACRE,wBAAQC,GAAR,CAAY,+BAA+BH,KAAKI,GAAL,GAAWC,EAAtD;AACAW,oBAAIyB,OAAJ,CAAYzC,IAAZ,GAAmBA,IAAnB;AACA,uBAAOC,KAAK,IAAL,EAAWD,IAAX,CAAP;AACH,aAJD,MAKI;AAAI;AACJE,wBAAQC,GAAR,CAAY,+BAAZ;AACA,uBAAOF,KAAK,IAAL,EAAWuC,OAAX,EAAoB,EAACZ,SAAS,qBAAV,EAApB,CAAP;AACH;AAEJ,SAvBL,EAuBOc,KAvBP,CAuBa7C,UAAU8C,eAvBvB,EAuBwC,UAAUhC,GAAV,EAAe;AAC/CT,oBAAQC,GAAR,CAAYQ,GAAZ;AACP,SAzBD;AA0BH,KA7BD,MA8BK,IAAGK,IAAIyB,OAAJ,CAAYzC,IAAZ,CAAiBK,EAApB,EAAwB;AACzB,YAAIuC,cAAchD,OAAOY,KAAP,CAAa,QAAb,CAAlB;AACIoC,oBACKZ,YADL,CACkB;AACVP,mBAAO,EAAER,UAAUD,IAAII,IAAJ,CAASH,QAArB,EADG;AAEVgB,sBAAU;AACNY,wBAAQ7B,IAAIyB,OAAJ,CAAYzC,IAAZ,CAAiBK,EADnB;AAENyC,2BAAW9B,IAAII,IAAJ,CAAS2B,OAAT,IAAoB;AAFzB;AAFA,SADlB,EAQKR,MARL,CAQY,UAACvC,IAAD,EAAOwC,OAAP,EAAmB;AACvB,gBAAIA,OAAJ,EAAa;AACTtC,wBAAQC,GAAR,CAAY,gBAAZ;AACA,uBAAOF,KAAK,IAAL,EAAWD,IAAX,CAAP;AACH,aAHD,MAIK;AACDE,wBAAQC,GAAR,CAAY,gDAAZ;AACA,uBAAOF,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC2B,SAAS,+BAAV,EAAlB,CAAP;AACH;AACJ,SAjBL,EAiBOc,KAjBP,CAiBa7C,UAAU8C,eAjBvB,EAiBwC,UAAUhC,GAAV,EAAe;AACnDT,oBAAQC,GAAR,CAAYQ,GAAZ;AACH,SAnBD;AAoBX;AACJ,CA3D4B,CAA7B;;AA8DAqC,OAAOC,OAAP,GAAiBzD,QAAjB","file":"Passport.js","sourcesContent":["/*\n* PassPort service for registering both barbers and clients\n*\n* Provides different strategies for signing in and signing up users.\n*\n* Sequelize models are used to declare different search queries for authentication\n*\n* Models Used:\n*   - Barber User\n*   - Client User\n*\n* Strategies used:\n* Local SignIn\n*   - Used to verify users when signing in API with username/email and password\n*   - Email is used instead of username to search for User in database if client is signing in\n*   - Username is used to lookup user if barber is signing in\n*\n* Local SignUp\n*   - Used to verify users when attempting to create a new account with username or email/password\n*/\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst dbmain = require('../../config/DB/DBmain');\nconst Sequelize = require('sequelize');\nconst UserController = require('../../profiles/Controllers/UserController');\n\n//serializes user id to session on each auth request after signin\npassport.serializeUser((user, done) => {\n    console.log('serialized');\n    done(null, user.get().id);\n});\n//removes user with id from session\npassport.deserializeUser((id, done) => {\n    let User = dbmain.model(\"User\");\n    User.findById(id)\n        .then((user,err) => {\n            done(err, user);\n        });\n});\n\n//Local signin strategy used for verfying and logging in existing users\npassport.use('local-signin', new LocalStrategy({\n        usernameField: 'email',\n        passwordField: 'password',\n        passReqToCallback: true\n    }, (req, username, password, done) => {\n        let type = req.body.type || 'client';\n        if (type === 'client') { //if type is client , proceeds to looking for a client User\n            //looks for client with matching email\n            let User = dbmain.model(\"User\");\n            let Hairtype = dbmain.model(\"Hairtype\");\n            let Photo = dbmain.model(\"Photo\");\n            let Location = dbmain.model(\"Location\");\n            User.findOne(\n                {where: {email: username},\n                include: [\n                {\n                    model: Hairtype,\n                    model: Photo,\n                    model: Location, as: 'UserPosition'\n                }\n            ]\n            })\n                .then((user, err) => {\n                    //respond with error if any are found\n                    if (err) {return done(err);}\n                    //if no user is found prompt user that email is incorrect\n                    if (!user) {\n                        console.log(\"User has incorrect email\");\n                        return done(null, false, {message: 'Incorrect email'})\n                    }\n                    //if password validation fails prompt user that password is incorrect\n                    if ((UserController.validatePassword(user, req))) {\n                        console.log(\"User has incorrect password\");\n                        return done(null, false, {message: 'Incorrect password'})\n                    }\n                    // if(tempUser.validatePassword(user, password)){\n                    else{\n                        //if nothing fails, complete request and respond with user object\n                        console.log(\"login successful\");\n                        return done(null, user);\n                    }\n                })\n            } else if (type === 'barber' && req.userId) { //if type is barber and userid has been passed proceeds to looking for barber\n            //looks for barber with matching username\n            let Barber = model(\"Barber\");\n            Barber.findOne({\n                where: {username: req.username}\n            }).then((user, err) => {\n                //respond with error if any are found\n                if (err) return done(err);\n                //if no barber matches prompt user that username is incorrect\n                if (!user) {\n                    return done(null, false, {message: 'Incorrect username'})\n                }\n                //if nothing fails, complete request and respond with barber object\n                return done(null, user)\n            });\n        }})\n    );\n\n//Local Sign Up strategy used for verifying and creating new users\npassport.use('local-signup', new LocalStrategy({\n        usernameField: 'email',\n        passwordField: 'password',\n        passReqToCallback: true\n    }, (req, username, password, done) => {\n    console.log('checking credentials');\n        if(req.body.type === 'client' || req.body.type == null) {\n            let User = dbmain.model(\"User\");\n            console.log('checking for user existence...');\n            User\n                .findOrCreate({ //look for existing user or create new\n                    where: { email: username},\n                    defaults: {\n                        id: req.body.id, //This id is generated somewhere else (only provided by req in dev)\n                        status: req.body.status || 'active',\n                        phoneNumber: req.body.phoneNumber,\n                        gender: req.body.gender || 0,\n                        paymentInfo: req.body.paymentInfo || null,\n                        passwordHash: password,\n                    }\n                })\n                .spread((user, created) => {\n                    if(user) {  //if user is created return user in callback\n                        console.log('new user created with id: ' + user.get().id);\n                        req.session.user = user;\n                        return done(null, user);\n                    }\n                    else{   //if user is not created respond with error message\n                        console.log('User has already been created');\n                        return done(null, created, {message: 'User already exists'})\n                    }\n\n                }).catch(Sequelize.ValidationError, function (err) {\n                    console.log(err)\n            });\n        }\n        else if(req.session.user.id) {\n            let BarberModel = dbmain.model(\"Barber\");\n                BarberModel\n                    .findOrCreate({\n                        where: { username: req.body.username},\n                        defaults: {\n                            UserId: req.session.user.id,\n                            isPremium: req.body.premium || false\n                        }\n                    })\n                    .spread((user, created) => {\n                        if (created) {\n                            console.log('barber Created');\n                            return done(null, user)\n                        }\n                        else {\n                            console.log(\"Barber already exists and could not be created\");\n                            return done(null, false, {message: 'Barber Profile already exists'})\n                        }\n                    }).catch(Sequelize.ValidationError, function (err) {\n                    console.log(err)\n                });\n    }\n})\n);\n\nmodule.exports = passport;"]}