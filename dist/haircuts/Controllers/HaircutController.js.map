{"version":3,"sources":["../../../haircuts/Controllers/HaircutController.js"],"names":["dbmain","require","module","exports","index","req","res","query","params","barberId","undefined","BarberId","userId","UserId","Haircut","model","findAll","where","limit","then","send","haircuts","err","status","error","postUserHaircut","User","BarberHaircut","beard","body","create","id","price","duration","BarberHaircutId","length","Beard","haircut","console","log","getLikes","BarberHaircutReview","Review","findById","haircutReview","ReviewId","Like","reviews","getComments","Comment","$ne"],"mappings":"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","file":"HaircutController.js","sourcesContent":["'use strict';\nconst dbmain = require('../../config/DB/DBmain');\n\nmodule.exports = {\n    async index (req, res) {\n        let query = {};\n        if(!(req.params.barberId === undefined)){\n            query.BarberId = req.params.barberId;\n        }\n        if(!(req.params.userId === undefined)){\n            query.UserId = req.params.userId;\n        }\n        let Haircut = dbmain.model(\"Haircut\");\n        try {\n            Haircut.findAll({\n                where: query,\n                limit: 20\n            }).then(haircuts => {\n                res.send(haircuts)\n            });\n        } catch(err) {\n            res.status(500).send({\n                error: 'An error has occurred trying to fetch songs' + err\n            })\n        }\n    },\n    async postUserHaircut (req, res) {\n        let Haircut = dbmain.model(\"Haircut\");\n        let User = dbmain.model(\"User\");\n        let BarberHaircut = dbmain.model('BarberHaircut');\n        let beard;\n        if(req.body.beard === \"no\"){\n            beard = false;\n        }\n        if(req.body.beard === \"yes\"){\n            beard = true;\n        }\n        try {\n            Haircut.create({\n                id: req.body.id,\n                price: req.body.price,\n                duration: req.body.duration,\n                UserId: req.body.UserId,\n                BarberHaircutId: req.body.BarberHaircutId,\n                length: req.body.length,\n                Beard: beard\n            })\n                .then(haircut => {\n                    res.send(haircut)\n                })\n        } catch(err) {\n            console.log(err);\n            res.status(500).send({\n                error: 'An error has occurred trying to create haircut' + err\n            })\n        }\n    },\n    async getLikes (req, res) {\n        let BarberHaircutReview = dbmain.model(\"BarberHaircutReview\");\n        let Review = dbmain.model(\"Review\");\n\n        BarberHaircutReview.findById(req.body.BarberHaircutId)\n            .then((haircutReview) => {\n                Review.findAll({\n                    where: {\n                        id: haircutReview.ReviewId,\n                        Like: true\n                    }\n                })\n                    .then((reviews) => {\n                        res.status(200).send(reviews.length);\n                    })\n            })\n    },\n    async getComments (req, res) {\n        let BarberHaircutReview = dbmain.model(\"BarberHaircutReview\");\n        let Review = dbmain.model(\"Review\");\n\n        BarberHaircutReview.findById(req.body.BarberHaircutId)\n            .then((haircutReview) => {\n                Review.findAll({\n                    where: {\n                        id: haircutReview.ReviewId,\n                        Comment: {\n                            //look for all reviews where comment is not null\n                            $ne: null\n                        }\n                    }\n                })\n                    .then((reviews) => {\n                        res.status(200).send(reviews);\n                    })\n            })\n    },\n};"]}